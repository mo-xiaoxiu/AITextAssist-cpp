<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AIÂä©Êâã - Â¢ûÂº∫Áâà</title>
    <script src="https://cdn.jsdelivr.net/npm/marked@9.1.2/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/highlight.js@11.9.0/lib/highlight.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@11.9.0/styles/github.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            overflow: hidden;
        }

        .sidebar {
            width: 280px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-right: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            flex-direction: column;
            transition: transform 0.3s ease;
        }

        .sidebar-header {
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .sidebar-title {
            font-size: 18px;
            font-weight: bold;
        }

        .new-chat-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        }

        .new-chat-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .conversation-list {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }

        .conversation-item {
            padding: 12px;
            margin-bottom: 8px;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.2s;
            position: relative;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .conversation-item:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .conversation-item.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .conversation-title {
            font-size: 14px;
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            flex: 1;
        }

        .conversation-time {
            font-size: 12px;
            opacity: 0.7;
            margin-left: 8px;
        }

        .delete-btn {
            background: none;
            border: none;
            color: #ff4757;
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .conversation-item:hover .delete-btn {
            opacity: 1;
        }

        .conversation-item.active .delete-btn {
            color: rgba(255, 255, 255, 0.8);
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
        }

        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }

        .message {
            margin-bottom: 20px;
            display: flex;
            align-items: flex-start;
        }

        .message.user {
            justify-content: flex-end;
        }

        .message-content {
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            word-wrap: break-word;
            line-height: 1.5;
        }

        .message.user .message-content {
            background: #007bff;
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message.assistant .message-content {
            background: white;
            color: #333;
            border: 1px solid #e9ecef;
            border-bottom-left-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .message-content h1, .message-content h2, .message-content h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .message-content p {
            margin-bottom: 10px;
        }

        .message-content p:last-child {
            margin-bottom: 0;
        }

        .message-content pre {
            background: #f4f4f4;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
            margin: 10px 0;
        }

        .message-content code {
            background: #f4f4f4;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }

        .message-content pre code {
            background: none;
            padding: 0;
        }

        .message-content ul, .message-content ol {
            margin-left: 20px;
            margin-bottom: 10px;
        }

        .message-content blockquote {
            border-left: 4px solid #007bff;
            padding-left: 16px;
            margin: 10px 0;
            color: #666;
        }

        .chat-input-container {
            padding: 20px;
            background: white;
            border-top: 1px solid #e9ecef;
            display: flex;
            gap: 10px;
        }

        .chat-input {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
            resize: none;
            min-height: 50px;
            max-height: 120px;
        }

        .chat-input:focus {
            border-color: #007bff;
        }

        .send-button {
            padding: 12px 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: transform 0.2s;
            min-width: 80px;
        }

        .send-button:hover {
            transform: translateY(-2px);
        }

        .send-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .typing-indicator {
            display: none;
            padding: 12px 16px;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 18px;
            border-bottom-left-radius: 4px;
            max-width: 70%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: #999;
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0%, 60%, 100% {
                transform: translateY(0);
            }
            30% {
                transform: translateY(-10px);
            }
        }

        .welcome-message {
            text-align: center;
            color: #666;
            margin-top: 50px;
            font-size: 18px;
        }

        .mobile-menu-btn {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: rgba(102, 126, 234, 0.9);
            color: white;
            border: none;
            padding: 10px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 18px;
        }

        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        @media (max-width: 768px) {
            .mobile-menu-btn {
                display: block;
            }

            .sidebar {
                position: fixed;
                left: -280px;
                top: 0;
                height: 100vh;
                z-index: 1000;
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(280px);
            }

            .overlay.show {
                display: block;
            }

            .main-content {
                width: 100%;
            }

            .chat-header {
                padding-left: 60px;
            }

            .message-content {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <button class="mobile-menu-btn" onclick="toggleSidebar()">‚ò∞</button>
    <div class="overlay" id="overlay" onclick="closeSidebar()"></div>

    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <div class="sidebar-title">üí¨ ÂØπËØùÂéÜÂè≤</div>
            <button class="new-chat-btn" onclick="createNewConversation()">Êñ∞ÂØπËØù</button>
        </div>
        <div class="conversation-list" id="conversationList">
            <!-- ÂØπËØùÂàóË°®Â∞ÜÂú®ËøôÈáåÂä®ÊÄÅÁîüÊàê -->
        </div>
    </div>

    <div class="main-content">
        <div class="chat-header">
            ü§ñ AIÂä©Êâã - Â¢ûÂº∫Áâà
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="welcome-message">
                üëã ‰Ω†Â•ΩÔºÅÊàëÊòØ‰Ω†ÁöÑAIÂä©ÊâãÔºåÊúâ‰ªÄ‰πàÂèØ‰ª•Â∏ÆÂä©‰Ω†ÁöÑÂêóÔºü<br>
                <small>ÊîØÊåÅMarkdownÊ†ºÂºèÊòæÁ§∫ÔºåÂèØ‰ª•Êü•ÁúãÂíåÁÆ°ÁêÜÂéÜÂè≤ÂØπËØù</small>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
        
        <div class="chat-input-container">
            <textarea 
                class="chat-input" 
                id="chatInput" 
                placeholder="ËæìÂÖ•‰Ω†ÁöÑÈóÆÈ¢ò..."
                rows="1"
            ></textarea>
            <button class="send-button" id="sendButton" onclick="sendMessage()">ÂèëÈÄÅ</button>
        </div>
    </div>

    <script>
        // ÈÖçÁΩÆmarked.js
        marked.setOptions({
            highlight: function(code, lang) {
                if (lang && hljs.getLanguage(lang)) {
                    return hljs.highlight(code, { language: lang }).value;
                }
                return hljs.highlightAuto(code).value;
            },
            breaks: true,
            gfm: true
        });

        // ÂÖ®Â±ÄÂèòÈáè
        let conversations = JSON.parse(localStorage.getItem('conversations') || '[]');
        let currentConversationId = null;
        const API_BASE_URL = 'http://localhost:8080';

        // ÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('Initializing application...');

            // Áõ¥Êé•‰ªéÂêéÁ´ØÂä†ËΩΩÂØπËØùÂàóË°®
            await loadConversationsFromBackend();

            setupEventListeners();

            console.log('Found conversations:', conversations.length);

            // Â¶ÇÊûúÊúâÂØπËØùÔºåÂä†ËΩΩÁ¨¨‰∏Ä‰∏™
            if (conversations.length > 0) {
                console.log('Loading first conversation:', conversations[0].id);
                await selectConversation(conversations[0].id);
            }
        });

        // ‰ªéÂêéÁ´ØÂä†ËΩΩÂØπËØùÂàóË°®
        async function loadConversationsFromBackend() {
            try {
                console.log('Loading conversations from backend...');
                const response = await fetch(`${API_BASE_URL}/api/conversations`);
                if (response.ok) {
                    const data = await response.json();
                    conversations = (data.conversations || []).map(conv => ({
                        id: conv.id,
                        title: conv.title || 'Êñ∞ÂØπËØù',
                        createdAt: new Date(conv.created_at * 1000).toISOString(),
                        updatedAt: new Date().toISOString()
                    }));

                    // ÊåâÂàõÂª∫Êó∂Èó¥ÊéíÂ∫èÔºàÊúÄÊñ∞ÁöÑÂú®ÂâçÈù¢Ôºâ
                    conversations.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

                    console.log('Conversations loaded:', conversations.length);
                    renderConversationList();
                } else {
                    console.error('Failed to load conversations:', response.status);
                }
            } catch (error) {
                console.error('Error loading conversations:', error);
            }
        }

        // Ê∏≤ÊüìÂØπËØùÂàóË°®
        function renderConversationList() {
            const conversationList = document.getElementById('conversationList');
            conversationList.innerHTML = '';

            conversations.forEach(conv => {
                const item = document.createElement('div');
                item.className = 'conversation-item';
                item.dataset.conversationId = conv.id;
                item.onclick = () => selectConversation(conv.id);

                const title = conv.title || 'Êñ∞ÂØπËØù';
                const time = new Date(conv.createdAt).toLocaleDateString();

                item.innerHTML = `
                    <div class="conversation-title">${title}</div>
                    <div class="conversation-time">${time}</div>
                    <button class="delete-btn" onclick="deleteConversation('${conv.id}', event)">üóëÔ∏è</button>
                `;

                // Â¶ÇÊûúÊòØÂΩìÂâçÂØπËØùÔºåÊ∑ªÂä†activeÁ±ª
                if (conv.id === currentConversationId) {
                    item.classList.add('active');
                }

                conversationList.appendChild(item);
            });
        }

        // ‰ªéÂêéÁ´ØÂêåÊ≠•ÂØπËØùÂàóË°®
        async function syncConversationsFromBackend() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/conversations`);

                if (response.ok) {
                    const data = await response.json();

                    // ÂêàÂπ∂ÂêéÁ´ØÂØπËØùÂà∞Êú¨Âú∞Â≠òÂÇ®
                    const backendConversations = data.conversations || [];

                    for (const backendConv of backendConversations) {
                        const existingConv = conversations.find(c => c.id === backendConv.id);

                        if (!existingConv) {
                            // Ê∑ªÂä†Êñ∞ÁöÑÂØπËØù
                            conversations.push({
                                id: backendConv.id,
                                title: backendConv.title || 'Êú™ÂëΩÂêçÂØπËØù',
                                messages: [], // Ê∂àÊÅØÂ∞ÜÂú®ÈÄâÊã©ÂØπËØùÊó∂Âä†ËΩΩ
                                createdAt: new Date(backendConv.created_at * 1000).toISOString(),
                                updatedAt: new Date().toISOString()
                            });
                        }
                    }

                    // ÊåâÂàõÂª∫Êó∂Èó¥ÊéíÂ∫èÔºàÊúÄÊñ∞ÁöÑÂú®ÂâçÈù¢Ôºâ
                    conversations.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

                    saveConversations();
                } else {
                    console.error('Failed to sync conversations from backend:', response.status);
                }
            } catch (error) {
                console.error('Error syncing conversations from backend:', error);
            }
        }

        function setupEventListeners() {
            const chatInput = document.getElementById('chatInput');
            
            // Ëá™Âä®Ë∞ÉÊï¥ËæìÂÖ•Ê°ÜÈ´òÂ∫¶
            chatInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });
            
            // ÂõûËΩ¶ÂèëÈÄÅÊ∂àÊÅØ
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        }

        // ÂàõÂª∫Êñ∞ÂØπËØù
        function createNewConversation() {
            const newConversation = {
                id: 'conv_' + Date.now(),
                title: 'Êñ∞ÂØπËØù',
                messages: [],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            conversations.unshift(newConversation);
            saveConversations();
            loadConversations();
            selectConversation(newConversation.id);
        }

        // Âä†ËΩΩÂØπËØùÂàóË°®
        function loadConversations() {
            const conversationList = document.getElementById('conversationList');
            conversationList.innerHTML = '';
            
            conversations.forEach(conv => {
                const item = document.createElement('div');
                item.className = 'conversation-item';
                item.dataset.conversationId = conv.id;
                item.onclick = () => selectConversation(conv.id);

                const title = conv.title || 'Êñ∞ÂØπËØù';
                const time = new Date(conv.updatedAt).toLocaleDateString();

                item.innerHTML = `
                    <div class="conversation-title">${title}</div>
                    <div class="conversation-time">${time}</div>
                    <button class="delete-btn" onclick="deleteConversation('${conv.id}', event)">üóëÔ∏è</button>
                `;

                // Â¶ÇÊûúÊòØÂΩìÂâçÂØπËØùÔºåÊ∑ªÂä†activeÁ±ª
                if (conv.id === currentConversationId) {
                    item.classList.add('active');
                }

                conversationList.appendChild(item);
            });
        }

        // ÈÄâÊã©ÂØπËØù
        async function selectConversation(conversationId) {
            console.log('Selecting conversation:', conversationId);
            currentConversationId = conversationId;

            // Êõ¥Êñ∞UIÁä∂ÊÄÅ
            document.querySelectorAll('.conversation-item').forEach(item => {
                item.classList.remove('active');
            });

            const selectedItem = document.querySelector(`[data-conversation-id="${conversationId}"]`);
            if (selectedItem) {
                selectedItem.classList.add('active');
            }

            // Áõ¥Êé•‰ªéÂêéÁ´ØÂä†ËΩΩÊ∂àÊÅØÔºå‰∏ç‰æùËµñÊú¨Âú∞Â≠òÂÇ®
            await loadMessagesFromBackend(conversationId);

            console.log('Conversation selected, currentConversationId:', currentConversationId);
        }

        // ‰ªéÂêéÁ´ØÂä†ËΩΩÊ∂àÊÅØ
        async function loadMessagesFromBackend(conversationId) {
            try {
                console.log('Loading messages from backend for:', conversationId);
                const response = await fetch(`${API_BASE_URL}/api/conversations/messages?conversation_id=${conversationId}`);
                if (response.ok) {
                    const data = await response.json();
                    console.log('Messages loaded:', data.messages?.length || 0);

                    // Ê∏ÖÁ©∫Ê∂àÊÅØÂå∫Âüü
                    const messagesContainer = document.getElementById('messages');
                    messagesContainer.innerHTML = '';

                    // Ê∏≤ÊüìÊ∂àÊÅØ
                    if (data.messages && data.messages.length > 0) {
                        data.messages.forEach(msg => {
                            addMessageToUI(msg.content, msg.role);
                        });
                    }
                } else {
                    console.error('Failed to load messages:', response.status);
                }
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        // ‰ªéÂêéÁ´ØÂä†ËΩΩÂØπËØùÂéÜÂè≤
        async function loadConversationFromBackend(conversationId) {
            console.log('Loading conversation from backend:', conversationId);
            try {
                const response = await fetch(`${API_BASE_URL}/api/conversations/messages?conversation_id=${conversationId}`);

                if (response.ok) {
                    const data = await response.json();
                    console.log('Loaded conversation data:', data);

                    // Êõ¥Êñ∞Êú¨Âú∞ÂØπËØùÊï∞ÊçÆ
                    let conversation = conversations.find(c => c.id === conversationId);
                    if (!conversation) {
                        // Â¶ÇÊûúÊú¨Âú∞Ê≤°ÊúâËøô‰∏™ÂØπËØùÔºåÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ
                        conversation = {
                            id: conversationId,
                            title: 'ÂéÜÂè≤ÂØπËØù',
                            messages: [],
                            createdAt: new Date().toISOString(),
                            updatedAt: new Date().toISOString()
                        };
                        conversations.unshift(conversation);
                        console.log('Created new conversation entry');
                    }

                    // Êõ¥Êñ∞Ê∂àÊÅØÂéÜÂè≤
                    conversation.messages = data.messages.map(msg => ({
                        role: msg.role,
                        content: msg.content,
                        timestamp: new Date(msg.timestamp * 1000).toISOString()
                    }));

                    // Â¶ÇÊûúÊúâÊ∂àÊÅØÔºå‰ΩøÁî®Á¨¨‰∏ÄÊù°Áî®Êà∑Ê∂àÊÅØ‰Ωú‰∏∫Ê†áÈ¢ò
                    const firstUserMessage = conversation.messages.find(m => m.role === 'user');
                    if (firstUserMessage && conversation.title === 'ÂéÜÂè≤ÂØπËØù') {
                        conversation.title = firstUserMessage.content.substring(0, 20) +
                                           (firstUserMessage.content.length > 20 ? '...' : '');
                    }

                    console.log('Updated conversation:', conversation);
                    saveConversations();
                    loadConversations();
                } else {
                    console.error('Failed to load conversation from backend:', response.status);
                }
            } catch (error) {
                console.error('Error loading conversation from backend:', error);
            }
        }

        // Âä†ËΩΩÊ∂àÊÅØ
        function loadMessages() {
            const conversation = conversations.find(c => c.id === currentConversationId);
            const chatMessages = document.getElementById('chatMessages');
            
            if (!conversation) return;
            
            chatMessages.innerHTML = '';
            
            if (conversation.messages.length === 0) {
                chatMessages.innerHTML = `
                    <div class="welcome-message">
                        üëã ‰Ω†Â•ΩÔºÅÊàëÊòØ‰Ω†ÁöÑAIÂä©ÊâãÔºåÊúâ‰ªÄ‰πàÂèØ‰ª•Â∏ÆÂä©‰Ω†ÁöÑÂêóÔºü<br>
                        <small>ÊîØÊåÅMarkdownÊ†ºÂºèÊòæÁ§∫ÔºåÂèØ‰ª•Êü•ÁúãÂíåÁÆ°ÁêÜÂéÜÂè≤ÂØπËØù</small>
                    </div>
                `;
            } else {
                conversation.messages.forEach(message => {
                    addMessageToUI(message.content, message.role, false);
                });
            }
            
            // ÊªöÂä®Âà∞Â∫ïÈÉ®
            chatMessages.scrollTop = chatMessages.scrollTop;
        }

        // Âà†Èô§ÂØπËØù
        function deleteConversation(conversationId, event) {
            event.stopPropagation();
            
            if (confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÂØπËØùÂêóÔºü')) {
                conversations = conversations.filter(c => c.id !== conversationId);
                saveConversations();
                loadConversations();
                
                // Â¶ÇÊûúÂà†Èô§ÁöÑÊòØÂΩìÂâçÂØπËØùÔºåÂàáÊç¢Âà∞ÂÖ∂‰ªñÂØπËØùÊàñÂàõÂª∫Êñ∞ÂØπËØù
                if (currentConversationId === conversationId) {
                    if (conversations.length > 0) {
                        selectConversation(conversations[0].id);
                    } else {
                        createNewConversation();
                    }
                }
            }
        }

        // ÂèëÈÄÅÊ∂àÊÅØ
        async function sendMessage() {
            const chatInput = document.getElementById('chatInput');
            const message = chatInput.value.trim();

            console.log('Sending message:', message, 'to conversation:', currentConversationId);

            if (!message) {
                console.log('Message is empty');
                return;
            }

            // Â¶ÇÊûúÊ≤°ÊúâÂΩìÂâçÂØπËØùIDÔºåÂàõÂª∫Êñ∞ÂØπËØù
            if (!currentConversationId) {
                console.log('No current conversation, will create new one');
            }
            
            // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
            chatInput.value = '';
            chatInput.style.height = 'auto';

            // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØÂà∞UI
            addMessageToUI(message, 'user');

            // ÊòæÁ§∫ËæìÂÖ•Áä∂ÊÄÅ
            showTyping();
            document.getElementById('sendButton').disabled = true;
            
            try {
                // Ë∞ÉÁî®API
                const requestBody = { message: message };
                if (currentConversationId) {
                    requestBody.conversation_id = currentConversationId;
                }

                console.log('Sending request:', requestBody);

                const response = await fetch(`${API_BASE_URL}/api/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();

                console.log('API response:', data);

                // Êõ¥Êñ∞conversation_idÔºàÂ¶ÇÊûúÂêéÁ´ØËøîÂõû‰∫ÜÊñ∞ÁöÑIDÔºâ
                if (data.conversation_id && data.conversation_id !== currentConversationId) {
                    console.log('Updating conversation ID from', currentConversationId, 'to', data.conversation_id);
                    currentConversationId = data.conversation_id;

                    // ÈáçÊñ∞Âä†ËΩΩÂØπËØùÂàóË°®‰ª•ÂåÖÂê´Êñ∞ÂØπËØù
                    await loadConversationsFromBackend();
                }

                // ÈöêËóèËæìÂÖ•Áä∂ÊÄÅ
                hideTyping();

                // Ê∑ªÂä†AIÂõûÂ§çÂà∞UI
                const aiResponse = data.response || 'Êä±Ê≠âÔºåÊàëÁé∞Âú®Êó†Ê≥ïÂõûÁ≠îËøô‰∏™ÈóÆÈ¢ò„ÄÇ';
                addMessageToUI(aiResponse, 'assistant');

                // Ê≥®ÈáäÊéâÊú¨Âú∞Ê∂àÊÅØ‰øùÂ≠òÔºåËÆ©ÂêéÁ´ØÊï∞ÊçÆÂ∫ì‰Ωú‰∏∫ÂîØ‰∏ÄÊï∞ÊçÆÊ∫ê
                // addMessageToConversation(message, 'user');
                // addMessageToConversation(aiResponse, 'assistant');

                // Êõ¥Êñ∞ÂØπËØùÊ†áÈ¢ò
                updateConversationTitle();
                
            } catch (error) {
                console.error('Error:', error);
                hideTyping();
                addMessageToUI('Êä±Ê≠âÔºåËøûÊé•ÊúçÂä°Âô®Êó∂Âá∫Áé∞ÈîôËØØ„ÄÇËØ∑Ê£ÄÊü•ÂêéÁ´ØÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°å„ÄÇ', 'assistant');
            }
            
            document.getElementById('sendButton').disabled = false;
            chatInput.focus();
        }

        // Ê∑ªÂä†Ê∂àÊÅØÂà∞UI
        function addMessageToUI(content, sender, scroll = true) {
            const chatMessages = document.getElementById('chatMessages');
            
            // ÁßªÈô§Ê¨¢ËøéÊ∂àÊÅØ
            const welcomeMessage = chatMessages.querySelector('.welcome-message');
            if (welcomeMessage) {
                welcomeMessage.remove();
            }
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            
            if (sender === 'assistant') {
                // ÂØπAIÂõûÂ§ç‰ΩøÁî®MarkdownÊ∏≤Êüì
                contentDiv.innerHTML = marked.parse(content);
            } else {
                // Áî®Êà∑Ê∂àÊÅØÁõ¥Êé•ÊòæÁ§∫ÊñáÊú¨
                contentDiv.textContent = content;
            }
            
            messageDiv.appendChild(contentDiv);
            chatMessages.appendChild(messageDiv);
            
            if (scroll) {
                // ÊªöÂä®Âà∞Â∫ïÈÉ®
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Ê∑ªÂä†Ê∂àÊÅØÂà∞ÂØπËØù
        function addMessageToConversation(content, role) {
            if (!currentConversationId) {
                console.error('No current conversation ID');
                return;
            }

            let conversation = conversations.find(c => c.id === currentConversationId);

            // Â¶ÇÊûúÊâæ‰∏çÂà∞ÂØπËØùÔºåÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ
            if (!conversation) {
                console.log('Creating new conversation entry for:', currentConversationId);
                conversation = {
                    id: currentConversationId,
                    title: role === 'user' ? (content.substring(0, 20) + (content.length > 20 ? '...' : '')) : 'Êñ∞ÂØπËØù',
                    messages: [],
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                conversations.unshift(conversation);
            }

            // Ê£ÄÊü•Ê∂àÊÅØÊòØÂê¶Â∑≤Â≠òÂú®ÔºàÈÅøÂÖçÈáçÂ§çÊ∑ªÂä†Ôºâ
            const existingMessage = conversation.messages.find(m =>
                m.role === role && m.content === content &&
                Math.abs(new Date() - new Date(m.timestamp)) < 1000 // 1ÁßíÂÜÖÁöÑÊ∂àÊÅØËÆ§‰∏∫ÊòØÈáçÂ§çÁöÑ
            );

            if (!existingMessage) {
                conversation.messages.push({
                    role: role,
                    content: content,
                    timestamp: new Date().toISOString()
                });

                conversation.updatedAt = new Date().toISOString();
                saveConversations();
                loadConversations(); // ÈáçÊñ∞Âä†ËΩΩ‰ª•Êõ¥Êñ∞Êó∂Èó¥ÊòæÁ§∫
                console.log('Added message to conversation:', role, content.substring(0, 50));
            } else {
                console.log('Message already exists, skipping duplicate');
            }
        }

        // Êõ¥Êñ∞ÂØπËØùÊ†áÈ¢ò
        function updateConversationTitle() {
            const conversation = conversations.find(c => c.id === currentConversationId);
            if (!conversation || conversation.messages.length === 0) return;
            
            // ‰ΩøÁî®Á¨¨‰∏ÄÊù°Áî®Êà∑Ê∂àÊÅØ‰Ωú‰∏∫Ê†áÈ¢ò
            const firstUserMessage = conversation.messages.find(m => m.role === 'user');
            if (firstUserMessage && conversation.title === 'Êñ∞ÂØπËØù') {
                conversation.title = firstUserMessage.content.substring(0, 20) + (firstUserMessage.content.length > 20 ? '...' : '');
                saveConversations();
                loadConversations();
            }
        }

        // ÊòæÁ§∫ËæìÂÖ•Áä∂ÊÄÅ
        function showTyping() {
            const typingIndicator = document.getElementById('typingIndicator');
            const chatMessages = document.getElementById('chatMessages');
            
            typingIndicator.style.display = 'block';
            chatMessages.appendChild(typingIndicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // ÈöêËóèËæìÂÖ•Áä∂ÊÄÅ
        function hideTyping() {
            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.style.display = 'none';
        }

        // ‰øùÂ≠òÂØπËØùÂà∞Êú¨Âú∞Â≠òÂÇ®
        function saveConversations() {
            localStorage.setItem('conversations', JSON.stringify(conversations));
        }

        // ÁßªÂä®Á´ØËèúÂçïÊéßÂà∂
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');

            sidebar.classList.toggle('open');
            overlay.classList.toggle('show');
        }

        function closeSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');

            sidebar.classList.remove('open');
            overlay.classList.remove('show');
        }
    </script>
</body>
</html>
